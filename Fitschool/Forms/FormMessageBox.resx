<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAfQAAAD6CAMAAABgdUV8AAAABGdBTUEAALGPC/xhBQAAAURQTFRFAIKT
        OfP/OOz4N+fzNuXxNeHsNd/qNNznM9jjNeTwN+n1OPL+OO76NeLtNN7pOO35OO/7M9rlOPD8NubxNeDr
        NNrlNuTvNd7pN+v3NN3oOOv3N+r2NeLuM9nkNN7qNNzoNujzM9vmNeXxNNvnNeDsN+z4OPH9N+35NeHt
        Nuj0NePvNufyNODrNun0NeTvNubyNebyNePuNun1Nur2NN/qNebxNN3pNuTwNufzNuv2NODsN+v2Nd7q
        N+76N+n0cPb/b+/4bOPrbejxcPX+bebub/P8bu31berzb/L7bOTsbefwbuz0befvbeXubuv0b/H6bery
        bejwcPT9bOXtb/D5b+73benxbu73burzbeTsbuz1bu72benybuvzbebvburybu32b+72b+32b/T9bev0
        bu/3b/X+beXtcPL7bunxM93oNOLtJFJ7TgAAAAlwSFlzAAALEQAACxEBf2RfkQAAFdhJREFUeF7tnet/
        28aVhhOFoihSskhZrh1LpC3JpGzHl2y39WZ7S1gpWct17fra2NmLd5PG3e7//30B8tHMHBIgCGCAGfCH
        55M0LwhSeDkzZ84cQJ/U1NTU1NTU1NTU1NTU1NTU1NTUuOHTmpUGmyVoNSsKNkvQalYUbJag1awo2CxB
        q1lRsFmCVrOiYLMErWZFwWYJWs2Kgs0StJoVBZslaDUrCjZL0GpWFGyWoNWsKNgsQatZUbBZgraqrK19
        1lhvNjdammazudle63DAqoPNErRVY2t7e3sjAKPnCcVL2+01jl9ZsFmCtjp0dtqfXcLZZWg221tdXruC
        YLMEbTXorDXW0xh+QS8Y8Hc5x4qBzRK0FWD38l78aJ7MlUu/2OJMqwQ2S9CqztpmHsMvuLq9tWoBHjZL
        0CrNtc0sY3o0VxurFdthswStunQuf45ftti4vkLzOzZL0CpKZ//gClZZZX1lpndslqBVks5nTUxKoD/Q
        3KAtgeb11ZjdsVmCVkVuJo3rh4O9dvtaN4BXTAh/b7ePBoM+h8Ww0VgF27FZglY5Om28iaJ/fOtoOOLI
        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
        /D/PURFtOgYExQAAAABJRU5ErkJggg==
</value>
  </data>
</root>